
            .pos 0
            irmovq stack, %rsp
            irmovq data_to_copy, %rdi
            irmovq data_dst, %rsi
            irmovq $1, %rdx

            call ncopy
            halt
            nop
            nop
            nop
            nop
            nop
        
        
################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 罗玥萦 2300017819
# Describe how and why you modified the baseline code.
# 1.count is 0 by default, so xorq at the beginnning is unnaccesary
# 2.%rdi = src, %rsi = dst, %rdx = len, %rax for count, other than %rsp, we have 10 registers left;
#   but I found nine way gives a better performance
# 3.once we get a num, use a triple tree to further divide it (greater,equal,or less)
# 4.reorder the instructions to avoid harzard: andq between rmmovq and mrmovq; jxx between mrmovq and andq


################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len

#ncopy:
################################################################################
# You can modify this portion
	# Loop header
#	xorq %rax,%rax		# count = 0;
#	andq %rdx,%rdx		# len <= 0?
#	jle Done		# if so, goto Done:

#Loop:	
#	mrmovq (%rdi), %r10	# read val from src...
#	rmmovq %r10, (%rsi)	# ...and store it to dst
#	andq %r10, %r10		# val <= 0?
#	jle Npos		# if so, goto Npos:
#	irmovq $1, %r10
#	addq %r10, %rax		# count++

#Npos:	
#	irmovq $1, %r10
#	subq %r10, %rdx		# len--
#	irmovq $8, %r10
#	addq %r10, %rdi		# src++
#	addq %r10, %rsi		# dst++
#	andq %rdx,%rdx		# len > 0?
#	jg Loop			# if so, goto Loop:
#Done:
#	ret

# In grader, we will add a "trap: jmp trap" here, which traps your program in an
# infinite loop. Thus your function should always return instead of falling
# through till the end of the source code :)

# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
	# Loop header
	iaddq $-9, %rdx #if len<9, goto final part
	jl TripleTree
Unrolling: # 9 way to use empty registers
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	rmmovq %r8, (%rsi) # here mrmovq and rmmovq is far enough to avoid data hazard
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
AddPos1: # if val>0, count++
	andq %r8, %r8
	jle AddPos2
	iaddq $0x1, %rax
AddPos2:
	andq %r9, %r9
    jle AddPos3
    iaddq $0x1, %rax
AddPos3:
    andq %r10, %r10
    jle AddPos4
    iaddq $0x1, %rax
AddPos4:  
    andq %r11, %r11
    jle AddPos5
    iaddq $0x1, %rax
AddPos5:
    andq %r12, %r12
    jle AddPos6
    iaddq $0x1, %rax
AddPos6:   
    andq %r13, %r13
    jle AddPos7
    iaddq $0x1, %rax
AddPos7:   
    andq %r14, %r14
    jle AddPos8
    iaddq $0x1, %rax
AddPos8:
    andq %rcx, %rcx
    jle AddPos9
    iaddq $0x1, %rax
AddPos9:   
    andq %rbx, %rbx
    jle Loop
    iaddq $0x1, %rax
Loop:
    iaddq $72, %rdi
    iaddq $72, %rsi
    iaddq $-9, %rdx # len - 9n < 9
    jge Unrolling

TripleTree: # 0-2, 3-5, 6-8
    iaddq $6, %rdx # add 6 back to len to see if it is 0-2
    jl TripleTreeLeft
    iaddq $-3, %rdx # add -3 back to len to see if it is 3-5
    jl TripleTreeMiddle

TripleTreeRight: # 6-8
    iaddq $-1, %rdx
    mrmovq 40(%rdi), %r13
    jl Remaining6
    mrmovq 48(%rdi), %r14
    je Remaining7
    mrmovq 56(%rdi), %rcx
    jg Remaining8

TripleTreeLeft: 
    iaddq $2, %rdx # add 1 back to len to see if it is 1
    mrmovq 8(%rdi), %r9
    jg Remaining2
    mrmovq (%rdi), %r8
    je Remaining1
    ret

TripleTreeMiddle: # 3-5
    iaddq $2, %rdx
    mrmovq 16(%rdi), %r10
    jl Remaining3
    mrmovq 24(%rdi), %r11
    je Remaining4
    mrmovq 32(%rdi), %r12
    jg Remaining5
Remaining8: # don't forget to mrmovq for the next remaining
    
	andq %rcx, %rcx
    rmmovq %rcx, 56(%rsi)
    mrmovq 48(%rdi), %r14
    jle Remaining7
    iaddq $0x1, %rax
Remaining7:
    
	andq %r14, %r14
    rmmovq %r14, 48(%rsi)
    mrmovq 40(%rdi), %r13
    jle Remaining6
    iaddq $0x1, %rax
Remaining6:
    
	andq %r13, %r13
    rmmovq %r13, 40(%rsi)
    mrmovq 32(%rdi), %r12
    jle Remaining5
    iaddq $0x1, %rax
Remaining5:
    
	andq %r12, %r12
    rmmovq %r12, 32(%rsi)
    mrmovq 24(%rdi), %r11
    jle Remaining4
    iaddq $0x1, %rax
Remaining4:
    
	andq %r11, %r11
    rmmovq %r11, 24(%rsi)
    mrmovq 16(%rdi), %r10
    jle Remaining3
    iaddq $0x1, %rax
Remaining3:
    
	andq %r10, %r10
    rmmovq %r10, 16(%rsi)
    mrmovq 8(%rdi), %r9
    jle Remaining2
    iaddq $0x1, %rax
Remaining2:
    
	andq %r9, %r9
    rmmovq %r9, 8(%rsi)
    mrmovq (%rdi), %r8
    jle Remaining1
    iaddq $0x1, %rax
Remaining1:
	andq %r8, %r8
    rmmovq %r8, (%rsi)
    jle Done
    iaddq $0x1, %rax
    jmp Done
Done:
    ret




        # do not fall through to the end of the source!
        # Otherwise you will encounter this trap :)
        trapititit: jmp trapititit

            .pos 0x1000 # source code + stack limits to 4kb
            .align 8
        stack:
        data_to_copy:
            .quad 0x53175d61490b23df
        data_dst:
        